// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProto.proto

#ifndef PROTOBUF_DBProto_2eproto__INCLUDED
#define PROTOBUF_DBProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DBProto_2eproto();
void protobuf_AssignDesc_DBProto_2eproto();
void protobuf_ShutdownFile_DBProto_2eproto();

class DBUserInfo;
class DBRecords;
class DBDetailRecords;
class DBNotice;
class DBRoom;

// ===================================================================

class DBUserInfo : public ::google::protobuf::Message {
 public:
  DBUserInfo();
  virtual ~DBUserInfo();

  DBUserInfo(const DBUserInfo& from);

  inline DBUserInfo& operator=(const DBUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBUserInfo& default_instance();

  void Swap(DBUserInfo* other);

  // implements Message ----------------------------------------------

  DBUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBUserInfo& from);
  void MergeFrom(const DBUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional uint32 sex = 3 [default = 1];
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string address = 5;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 5;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional uint32 gold = 6 [default = 4000];
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 6;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 diamon = 7 [default = 8];
  inline bool has_diamon() const;
  inline void clear_diamon();
  static const int kDiamonFieldNumber = 7;
  inline ::google::protobuf::uint32 diamon() const;
  inline void set_diamon(::google::protobuf::uint32 value);

  // optional uint32 card = 8 [default = 1];
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 8;
  inline ::google::protobuf::uint32 card() const;
  inline void set_card(::google::protobuf::uint32 value);

  // optional string code = 9;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 9;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string token = 10;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 10;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 picid = 11 [default = 1];
  inline bool has_picid() const;
  inline void clear_picid();
  static const int kPicidFieldNumber = 11;
  inline ::google::protobuf::uint32 picid() const;
  inline void set_picid(::google::protobuf::uint32 value);

  // optional string unionid = 12;
  inline bool has_unionid() const;
  inline void clear_unionid();
  static const int kUnionidFieldNumber = 12;
  inline const ::std::string& unionid() const;
  inline void set_unionid(const ::std::string& value);
  inline void set_unionid(const char* value);
  inline void set_unionid(const char* value, size_t size);
  inline ::std::string* mutable_unionid();
  inline ::std::string* release_unionid();
  inline void set_allocated_unionid(::std::string* unionid);

  // optional string picurl = 13;
  inline bool has_picurl() const;
  inline void clear_picurl();
  static const int kPicurlFieldNumber = 13;
  inline const ::std::string& picurl() const;
  inline void set_picurl(const ::std::string& value);
  inline void set_picurl(const char* value);
  inline void set_picurl(const char* value, size_t size);
  inline ::std::string* mutable_picurl();
  inline ::std::string* release_picurl();
  inline void set_allocated_picurl(::std::string* picurl);

  // @@protoc_insertion_point(class_scope:protocol.DBUserInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamon();
  inline void clear_has_diamon();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_picid();
  inline void clear_has_picid();
  inline void set_has_unionid();
  inline void clear_has_unionid();
  inline void set_has_picurl();
  inline void clear_has_picurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* userid_;
  ::std::string* username_;
  ::std::string* ip_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 gold_;
  ::std::string* address_;
  ::google::protobuf::uint32 diamon_;
  ::google::protobuf::uint32 card_;
  ::std::string* code_;
  ::std::string* token_;
  ::std::string* unionid_;
  ::std::string* picurl_;
  ::google::protobuf::uint32 picid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static DBUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class DBRecords : public ::google::protobuf::Message {
 public:
  DBRecords();
  virtual ~DBRecords();

  DBRecords(const DBRecords& from);

  inline DBRecords& operator=(const DBRecords& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBRecords& default_instance();

  void Swap(DBRecords* other);

  // implements Message ----------------------------------------------

  DBRecords* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBRecords& from);
  void MergeFrom(const DBRecords& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const char* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional uint32 rtype = 3 [default = 1];
  inline bool has_rtype() const;
  inline void clear_rtype();
  static const int kRtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 rtype() const;
  inline void set_rtype(::google::protobuf::uint32 value);

  // optional string ctime = 4;
  inline bool has_ctime() const;
  inline void clear_ctime();
  static const int kCtimeFieldNumber = 4;
  inline const ::std::string& ctime() const;
  inline void set_ctime(const ::std::string& value);
  inline void set_ctime(const char* value);
  inline void set_ctime(const char* value, size_t size);
  inline ::std::string* mutable_ctime();
  inline ::std::string* release_ctime();
  inline void set_allocated_ctime(::std::string* ctime);

  // @@protoc_insertion_point(class_scope:protocol.DBRecords)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_rtype();
  inline void clear_has_rtype();
  inline void set_has_ctime();
  inline void clear_has_ctime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* roomid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rtype_;
  ::std::string* ctime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static DBRecords* default_instance_;
};
// -------------------------------------------------------------------

class DBDetailRecords : public ::google::protobuf::Message {
 public:
  DBDetailRecords();
  virtual ~DBDetailRecords();

  DBDetailRecords(const DBDetailRecords& from);

  inline DBDetailRecords& operator=(const DBDetailRecords& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBDetailRecords& default_instance();

  void Swap(DBDetailRecords* other);

  // implements Message ----------------------------------------------

  DBDetailRecords* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBDetailRecords& from);
  void MergeFrom(const DBDetailRecords& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 fkey = 2;
  inline bool has_fkey() const;
  inline void clear_fkey();
  static const int kFkeyFieldNumber = 2;
  inline ::google::protobuf::uint32 fkey() const;
  inline void set_fkey(::google::protobuf::uint32 value);

  // optional string userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional uint32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 win = 5;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 5;
  inline ::google::protobuf::uint32 win() const;
  inline void set_win(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.DBDetailRecords)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fkey();
  inline void clear_has_fkey();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_win();
  inline void clear_has_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 fkey_;
  ::std::string* userid_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static DBDetailRecords* default_instance_;
};
// -------------------------------------------------------------------

class DBNotice : public ::google::protobuf::Message {
 public:
  DBNotice();
  virtual ~DBNotice();

  DBNotice(const DBNotice& from);

  inline DBNotice& operator=(const DBNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBNotice& default_instance();

  void Swap(DBNotice* other);

  // implements Message ----------------------------------------------

  DBNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBNotice& from);
  void MergeFrom(const DBNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string notice1 = 2;
  inline bool has_notice1() const;
  inline void clear_notice1();
  static const int kNotice1FieldNumber = 2;
  inline const ::std::string& notice1() const;
  inline void set_notice1(const ::std::string& value);
  inline void set_notice1(const char* value);
  inline void set_notice1(const char* value, size_t size);
  inline ::std::string* mutable_notice1();
  inline ::std::string* release_notice1();
  inline void set_allocated_notice1(::std::string* notice1);

  // optional string notice2 = 3;
  inline bool has_notice2() const;
  inline void clear_notice2();
  static const int kNotice2FieldNumber = 3;
  inline const ::std::string& notice2() const;
  inline void set_notice2(const ::std::string& value);
  inline void set_notice2(const char* value);
  inline void set_notice2(const char* value, size_t size);
  inline ::std::string* mutable_notice2();
  inline ::std::string* release_notice2();
  inline void set_allocated_notice2(::std::string* notice2);

  // @@protoc_insertion_point(class_scope:protocol.DBNotice)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_notice1();
  inline void clear_has_notice1();
  inline void set_has_notice2();
  inline void clear_has_notice2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice1_;
  ::std::string* notice2_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static DBNotice* default_instance_;
};
// -------------------------------------------------------------------

class DBRoom : public ::google::protobuf::Message {
 public:
  DBRoom();
  virtual ~DBRoom();

  DBRoom(const DBRoom& from);

  inline DBRoom& operator=(const DBRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBRoom& default_instance();

  void Swap(DBRoom* other);

  // implements Message ----------------------------------------------

  DBRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBRoom& from);
  void MergeFrom(const DBRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 round = 2;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 2;
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional uint32 ante = 3;
  inline bool has_ante() const;
  inline void clear_ante();
  static const int kAnteFieldNumber = 3;
  inline ::google::protobuf::uint32 ante() const;
  inline void set_ante(::google::protobuf::uint32 value);

  // optional string remark = 4;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 4;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // optional uint32 number = 5;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 5;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // optional uint32 piao = 6;
  inline bool has_piao() const;
  inline void clear_piao();
  static const int kPiaoFieldNumber = 6;
  inline ::google::protobuf::uint32 piao() const;
  inline void set_piao(::google::protobuf::uint32 value);

  // optional uint32 laizi = 7;
  inline bool has_laizi() const;
  inline void clear_laizi();
  static const int kLaiziFieldNumber = 7;
  inline ::google::protobuf::uint32 laizi() const;
  inline void set_laizi(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.DBRoom)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_ante();
  inline void clear_has_ante();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_piao();
  inline void clear_has_piao();
  inline void set_has_laizi();
  inline void clear_has_laizi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 round_;
  ::std::string* remark_;
  ::google::protobuf::uint32 ante_;
  ::google::protobuf::uint32 number_;
  ::google::protobuf::uint32 piao_;
  ::google::protobuf::uint32 laizi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_DBProto_2eproto();
  friend void protobuf_AssignDesc_DBProto_2eproto();
  friend void protobuf_ShutdownFile_DBProto_2eproto();

  void InitAsDefaultInstance();
  static DBRoom* default_instance_;
};
// ===================================================================


// ===================================================================

// DBUserInfo

// required string userid = 1;
inline bool DBUserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBUserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBUserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBUserInfo::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& DBUserInfo::userid() const {
  return *userid_;
}
inline void DBUserInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DBUserInfo::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DBUserInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBUserInfo::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* DBUserInfo::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBUserInfo::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string username = 2;
inline bool DBUserInfo::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBUserInfo::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBUserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBUserInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& DBUserInfo::username() const {
  return *username_;
}
inline void DBUserInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void DBUserInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void DBUserInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBUserInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* DBUserInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBUserInfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 3 [default = 1];
inline bool DBUserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBUserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBUserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBUserInfo::clear_sex() {
  sex_ = 1u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 DBUserInfo::sex() const {
  return sex_;
}
inline void DBUserInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string ip = 4;
inline bool DBUserInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBUserInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBUserInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBUserInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& DBUserInfo::ip() const {
  return *ip_;
}
inline void DBUserInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DBUserInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DBUserInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBUserInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* DBUserInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBUserInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 5;
inline bool DBUserInfo::has_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBUserInfo::set_has_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBUserInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBUserInfo::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& DBUserInfo::address() const {
  return *address_;
}
inline void DBUserInfo::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void DBUserInfo::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void DBUserInfo::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBUserInfo::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* DBUserInfo::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBUserInfo::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gold = 6 [default = 4000];
inline bool DBUserInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBUserInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBUserInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBUserInfo::clear_gold() {
  gold_ = 4000u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 DBUserInfo::gold() const {
  return gold_;
}
inline void DBUserInfo::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 diamon = 7 [default = 8];
inline bool DBUserInfo::has_diamon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBUserInfo::set_has_diamon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBUserInfo::clear_has_diamon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBUserInfo::clear_diamon() {
  diamon_ = 8u;
  clear_has_diamon();
}
inline ::google::protobuf::uint32 DBUserInfo::diamon() const {
  return diamon_;
}
inline void DBUserInfo::set_diamon(::google::protobuf::uint32 value) {
  set_has_diamon();
  diamon_ = value;
}

// optional uint32 card = 8 [default = 1];
inline bool DBUserInfo::has_card() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DBUserInfo::set_has_card() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DBUserInfo::clear_has_card() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DBUserInfo::clear_card() {
  card_ = 1u;
  clear_has_card();
}
inline ::google::protobuf::uint32 DBUserInfo::card() const {
  return card_;
}
inline void DBUserInfo::set_card(::google::protobuf::uint32 value) {
  set_has_card();
  card_ = value;
}

// optional string code = 9;
inline bool DBUserInfo::has_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DBUserInfo::set_has_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DBUserInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DBUserInfo::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& DBUserInfo::code() const {
  return *code_;
}
inline void DBUserInfo::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void DBUserInfo::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void DBUserInfo::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBUserInfo::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* DBUserInfo::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBUserInfo::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 10;
inline bool DBUserInfo::has_token() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DBUserInfo::set_has_token() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DBUserInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DBUserInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& DBUserInfo::token() const {
  return *token_;
}
inline void DBUserInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void DBUserInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void DBUserInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBUserInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* DBUserInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBUserInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 picid = 11 [default = 1];
inline bool DBUserInfo::has_picid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DBUserInfo::set_has_picid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DBUserInfo::clear_has_picid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DBUserInfo::clear_picid() {
  picid_ = 1u;
  clear_has_picid();
}
inline ::google::protobuf::uint32 DBUserInfo::picid() const {
  return picid_;
}
inline void DBUserInfo::set_picid(::google::protobuf::uint32 value) {
  set_has_picid();
  picid_ = value;
}

// optional string unionid = 12;
inline bool DBUserInfo::has_unionid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DBUserInfo::set_has_unionid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DBUserInfo::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DBUserInfo::clear_unionid() {
  if (unionid_ != &::google::protobuf::internal::kEmptyString) {
    unionid_->clear();
  }
  clear_has_unionid();
}
inline const ::std::string& DBUserInfo::unionid() const {
  return *unionid_;
}
inline void DBUserInfo::set_unionid(const ::std::string& value) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(value);
}
inline void DBUserInfo::set_unionid(const char* value) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(value);
}
inline void DBUserInfo::set_unionid(const char* value, size_t size) {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  unionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBUserInfo::mutable_unionid() {
  set_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    unionid_ = new ::std::string;
  }
  return unionid_;
}
inline ::std::string* DBUserInfo::release_unionid() {
  clear_has_unionid();
  if (unionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unionid_;
    unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBUserInfo::set_allocated_unionid(::std::string* unionid) {
  if (unionid_ != &::google::protobuf::internal::kEmptyString) {
    delete unionid_;
  }
  if (unionid) {
    set_has_unionid();
    unionid_ = unionid;
  } else {
    clear_has_unionid();
    unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string picurl = 13;
inline bool DBUserInfo::has_picurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DBUserInfo::set_has_picurl() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DBUserInfo::clear_has_picurl() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DBUserInfo::clear_picurl() {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    picurl_->clear();
  }
  clear_has_picurl();
}
inline const ::std::string& DBUserInfo::picurl() const {
  return *picurl_;
}
inline void DBUserInfo::set_picurl(const ::std::string& value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void DBUserInfo::set_picurl(const char* value) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(value);
}
inline void DBUserInfo::set_picurl(const char* value, size_t size) {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  picurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBUserInfo::mutable_picurl() {
  set_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    picurl_ = new ::std::string;
  }
  return picurl_;
}
inline ::std::string* DBUserInfo::release_picurl() {
  clear_has_picurl();
  if (picurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picurl_;
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBUserInfo::set_allocated_picurl(::std::string* picurl) {
  if (picurl_ != &::google::protobuf::internal::kEmptyString) {
    delete picurl_;
  }
  if (picurl) {
    set_has_picurl();
    picurl_ = picurl;
  } else {
    clear_has_picurl();
    picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DBRecords

// required uint32 id = 1;
inline bool DBRecords::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBRecords::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBRecords::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBRecords::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DBRecords::id() const {
  return id_;
}
inline void DBRecords::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string roomid = 2;
inline bool DBRecords::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBRecords::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBRecords::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBRecords::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& DBRecords::roomid() const {
  return *roomid_;
}
inline void DBRecords::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
}
inline void DBRecords::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
}
inline void DBRecords::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBRecords::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  return roomid_;
}
inline ::std::string* DBRecords::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBRecords::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 rtype = 3 [default = 1];
inline bool DBRecords::has_rtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBRecords::set_has_rtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBRecords::clear_has_rtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBRecords::clear_rtype() {
  rtype_ = 1u;
  clear_has_rtype();
}
inline ::google::protobuf::uint32 DBRecords::rtype() const {
  return rtype_;
}
inline void DBRecords::set_rtype(::google::protobuf::uint32 value) {
  set_has_rtype();
  rtype_ = value;
}

// optional string ctime = 4;
inline bool DBRecords::has_ctime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBRecords::set_has_ctime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBRecords::clear_has_ctime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBRecords::clear_ctime() {
  if (ctime_ != &::google::protobuf::internal::kEmptyString) {
    ctime_->clear();
  }
  clear_has_ctime();
}
inline const ::std::string& DBRecords::ctime() const {
  return *ctime_;
}
inline void DBRecords::set_ctime(const ::std::string& value) {
  set_has_ctime();
  if (ctime_ == &::google::protobuf::internal::kEmptyString) {
    ctime_ = new ::std::string;
  }
  ctime_->assign(value);
}
inline void DBRecords::set_ctime(const char* value) {
  set_has_ctime();
  if (ctime_ == &::google::protobuf::internal::kEmptyString) {
    ctime_ = new ::std::string;
  }
  ctime_->assign(value);
}
inline void DBRecords::set_ctime(const char* value, size_t size) {
  set_has_ctime();
  if (ctime_ == &::google::protobuf::internal::kEmptyString) {
    ctime_ = new ::std::string;
  }
  ctime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBRecords::mutable_ctime() {
  set_has_ctime();
  if (ctime_ == &::google::protobuf::internal::kEmptyString) {
    ctime_ = new ::std::string;
  }
  return ctime_;
}
inline ::std::string* DBRecords::release_ctime() {
  clear_has_ctime();
  if (ctime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ctime_;
    ctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBRecords::set_allocated_ctime(::std::string* ctime) {
  if (ctime_ != &::google::protobuf::internal::kEmptyString) {
    delete ctime_;
  }
  if (ctime) {
    set_has_ctime();
    ctime_ = ctime;
  } else {
    clear_has_ctime();
    ctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DBDetailRecords

// required uint32 id = 1;
inline bool DBDetailRecords::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBDetailRecords::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBDetailRecords::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBDetailRecords::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DBDetailRecords::id() const {
  return id_;
}
inline void DBDetailRecords::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 fkey = 2;
inline bool DBDetailRecords::has_fkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBDetailRecords::set_has_fkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBDetailRecords::clear_has_fkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBDetailRecords::clear_fkey() {
  fkey_ = 0u;
  clear_has_fkey();
}
inline ::google::protobuf::uint32 DBDetailRecords::fkey() const {
  return fkey_;
}
inline void DBDetailRecords::set_fkey(::google::protobuf::uint32 value) {
  set_has_fkey();
  fkey_ = value;
}

// optional string userid = 3;
inline bool DBDetailRecords::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBDetailRecords::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBDetailRecords::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBDetailRecords::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& DBDetailRecords::userid() const {
  return *userid_;
}
inline void DBDetailRecords::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DBDetailRecords::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void DBDetailRecords::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBDetailRecords::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* DBDetailRecords::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBDetailRecords::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 score = 4;
inline bool DBDetailRecords::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBDetailRecords::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBDetailRecords::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBDetailRecords::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 DBDetailRecords::score() const {
  return score_;
}
inline void DBDetailRecords::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 win = 5;
inline bool DBDetailRecords::has_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBDetailRecords::set_has_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBDetailRecords::clear_has_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBDetailRecords::clear_win() {
  win_ = 0u;
  clear_has_win();
}
inline ::google::protobuf::uint32 DBDetailRecords::win() const {
  return win_;
}
inline void DBDetailRecords::set_win(::google::protobuf::uint32 value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// DBNotice

// required uint32 id = 1;
inline bool DBNotice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBNotice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBNotice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBNotice::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DBNotice::id() const {
  return id_;
}
inline void DBNotice::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string notice1 = 2;
inline bool DBNotice::has_notice1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBNotice::set_has_notice1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBNotice::clear_has_notice1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBNotice::clear_notice1() {
  if (notice1_ != &::google::protobuf::internal::kEmptyString) {
    notice1_->clear();
  }
  clear_has_notice1();
}
inline const ::std::string& DBNotice::notice1() const {
  return *notice1_;
}
inline void DBNotice::set_notice1(const ::std::string& value) {
  set_has_notice1();
  if (notice1_ == &::google::protobuf::internal::kEmptyString) {
    notice1_ = new ::std::string;
  }
  notice1_->assign(value);
}
inline void DBNotice::set_notice1(const char* value) {
  set_has_notice1();
  if (notice1_ == &::google::protobuf::internal::kEmptyString) {
    notice1_ = new ::std::string;
  }
  notice1_->assign(value);
}
inline void DBNotice::set_notice1(const char* value, size_t size) {
  set_has_notice1();
  if (notice1_ == &::google::protobuf::internal::kEmptyString) {
    notice1_ = new ::std::string;
  }
  notice1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBNotice::mutable_notice1() {
  set_has_notice1();
  if (notice1_ == &::google::protobuf::internal::kEmptyString) {
    notice1_ = new ::std::string;
  }
  return notice1_;
}
inline ::std::string* DBNotice::release_notice1() {
  clear_has_notice1();
  if (notice1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice1_;
    notice1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBNotice::set_allocated_notice1(::std::string* notice1) {
  if (notice1_ != &::google::protobuf::internal::kEmptyString) {
    delete notice1_;
  }
  if (notice1) {
    set_has_notice1();
    notice1_ = notice1;
  } else {
    clear_has_notice1();
    notice1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string notice2 = 3;
inline bool DBNotice::has_notice2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBNotice::set_has_notice2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBNotice::clear_has_notice2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBNotice::clear_notice2() {
  if (notice2_ != &::google::protobuf::internal::kEmptyString) {
    notice2_->clear();
  }
  clear_has_notice2();
}
inline const ::std::string& DBNotice::notice2() const {
  return *notice2_;
}
inline void DBNotice::set_notice2(const ::std::string& value) {
  set_has_notice2();
  if (notice2_ == &::google::protobuf::internal::kEmptyString) {
    notice2_ = new ::std::string;
  }
  notice2_->assign(value);
}
inline void DBNotice::set_notice2(const char* value) {
  set_has_notice2();
  if (notice2_ == &::google::protobuf::internal::kEmptyString) {
    notice2_ = new ::std::string;
  }
  notice2_->assign(value);
}
inline void DBNotice::set_notice2(const char* value, size_t size) {
  set_has_notice2();
  if (notice2_ == &::google::protobuf::internal::kEmptyString) {
    notice2_ = new ::std::string;
  }
  notice2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBNotice::mutable_notice2() {
  set_has_notice2();
  if (notice2_ == &::google::protobuf::internal::kEmptyString) {
    notice2_ = new ::std::string;
  }
  return notice2_;
}
inline ::std::string* DBNotice::release_notice2() {
  clear_has_notice2();
  if (notice2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice2_;
    notice2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBNotice::set_allocated_notice2(::std::string* notice2) {
  if (notice2_ != &::google::protobuf::internal::kEmptyString) {
    delete notice2_;
  }
  if (notice2) {
    set_has_notice2();
    notice2_ = notice2;
  } else {
    clear_has_notice2();
    notice2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DBRoom

// required uint32 id = 1;
inline bool DBRoom::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBRoom::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBRoom::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBRoom::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DBRoom::id() const {
  return id_;
}
inline void DBRoom::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 round = 2;
inline bool DBRoom::has_round() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBRoom::set_has_round() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBRoom::clear_has_round() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBRoom::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 DBRoom::round() const {
  return round_;
}
inline void DBRoom::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
}

// optional uint32 ante = 3;
inline bool DBRoom::has_ante() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBRoom::set_has_ante() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBRoom::clear_has_ante() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBRoom::clear_ante() {
  ante_ = 0u;
  clear_has_ante();
}
inline ::google::protobuf::uint32 DBRoom::ante() const {
  return ante_;
}
inline void DBRoom::set_ante(::google::protobuf::uint32 value) {
  set_has_ante();
  ante_ = value;
}

// optional string remark = 4;
inline bool DBRoom::has_remark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBRoom::set_has_remark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBRoom::clear_has_remark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBRoom::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& DBRoom::remark() const {
  return *remark_;
}
inline void DBRoom::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void DBRoom::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void DBRoom::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DBRoom::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* DBRoom::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DBRoom::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 number = 5;
inline bool DBRoom::has_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBRoom::set_has_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBRoom::clear_has_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBRoom::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 DBRoom::number() const {
  return number_;
}
inline void DBRoom::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// optional uint32 piao = 6;
inline bool DBRoom::has_piao() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBRoom::set_has_piao() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBRoom::clear_has_piao() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBRoom::clear_piao() {
  piao_ = 0u;
  clear_has_piao();
}
inline ::google::protobuf::uint32 DBRoom::piao() const {
  return piao_;
}
inline void DBRoom::set_piao(::google::protobuf::uint32 value) {
  set_has_piao();
  piao_ = value;
}

// optional uint32 laizi = 7;
inline bool DBRoom::has_laizi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBRoom::set_has_laizi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBRoom::clear_has_laizi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBRoom::clear_laizi() {
  laizi_ = 0u;
  clear_has_laizi();
}
inline ::google::protobuf::uint32 DBRoom::laizi() const {
  return laizi_;
}
inline void DBRoom::set_laizi(::google::protobuf::uint32 value) {
  set_has_laizi();
  laizi_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBProto_2eproto__INCLUDED
